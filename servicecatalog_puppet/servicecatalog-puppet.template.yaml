# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Bootstrap template used to bring up the main ServiceCatalog-Puppet AWS CodePipeline with dependencies

Parameters:
  Version:
    Type: String
    Default: "{{ VERSION }}"
  OrgIamRoleArn:
    Type: String
    Default: "None"

Conditions:
  ShouldNotUseOrgs: !Equals [ !Ref OrgIamRoleArn, None ]
  ShouldUseOrgs: !Not [!Equals [!Ref OrgIamRoleArn, None]]

Resources:
  Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: service-catalog-puppet-version
      Type: String
      Value: !Ref Version

  ShareAcceptFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: ShareAcceptFunctionRole
      Path: /servicecatalog-puppet/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ServiceCatalogActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: arn:aws:iam::*:role/servicecatalog-puppet/PuppetRole

  ProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PuppetProvisioningRole
      Path: /servicecatalog-puppet/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "${AWS::AccountId}"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormationDeployRole
      Path: /servicecatalog-puppet/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "${AWS::AccountId}"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PuppetCodePipelineRole
      Path: /servicecatalog-puppet/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  SourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PuppetSourceRole
      Path: /servicecatalog-puppet/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Repo to store the servicecatalog puppet solution
      RepositoryName: ServiceCatalogPuppet

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub "${AWS::StackName}-pipeline"
      ArtifactStores:
        {% for region in ALL_REGIONS %}
        - Region: {{ region }}
          ArtifactStore:
            Type: S3
            Location: !Sub "sc-puppet-pipeline-artifacts-${AWS::AccountId}-{{ region }}"
        {% endfor %}
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: CodeCommit
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt CodeRepo.Name
                BranchName: master
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
              RoleArn: !GetAtt SourceRole.Arn
        - Name: Generate
          Actions:
            - Name: GenerateShares
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref GenerateSharesProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: GenerateShares
        - Name: SetUpShares
          Actions:
            {% for region in ALL_REGIONS %}
            - Name: Deploy-{{ region }}
              Region: {{ region }}
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::StackName}-shares"
                TemplatePath: !Sub "GenerateShares::output/templates/shares/{{ region }}/shares.template.yaml"
              RunOrder: 1
              InputArtifacts:
                - Name: GenerateShares
            {% endfor %}
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DeployProject
                PrimarySource: GenerateShares
              RunOrder: 1
              InputArtifacts:
                - Name: GenerateShares
              OutputArtifacts:
                - Name: Deploy

  GenerateRoleForOrg:
    Type: AWS::IAM::Role
    Condition: ShouldUseOrgs
    Properties:
      RoleName: PuppetGenerateProjectRole
      Path: /servicecatalog-puppet/
      Policies:
        - PolicyName: Org
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref OrgIamRoleArn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  GenerateRoleNotForOrg:
    Type: AWS::IAM::Role
    Condition: ShouldNotUseOrgs
    Properties:
      RoleName: PuppetGenerateProjectRole
      Path: /servicecatalog-puppet/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PuppetDeployRole
      Path: /servicecatalog-puppet/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess


  GenerateSharesProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-puppet-generate
      Description: "builds out the products to be deployed"
      ServiceRole: !If [ShouldUseOrgs, !GetAtt GenerateRoleForOrg.Arn, !GetAtt GenerateRoleNotForOrg.Arn]
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
          {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
          {% else %}
                - pip install aws-service-catalog-puppet=={{ VERSION }}
          {% endif %}
            build:
              commands:
                - servicecatalog-puppet --info expand manifest.yaml
                - servicecatalog-puppet --info generate-shares manifest-expanded.yaml
          artifacts:
            files:
              - manifest-expanded.yaml
              - output/*/*/*/*.template.yaml
            name: GenerateShares
      TimeoutInMinutes: 30

  DeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-puppet-deploy
      Description: "deploys out the products to be deployed"
      ServiceRole: !GetAtt DeployRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
          {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
          {% else %}
                - pip install aws-service-catalog-puppet=={{ VERSION }}
          {% endif %}
            build:
              commands:
                - servicecatalog-puppet --info deploy manifest-expanded.yaml

      TimeoutInMinutes: 30


  SingleAccountRunProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-puppet-single-account-run
      Description: "Runs puppet for a single account - SINGLE_ACCOUNT_ID"
      ServiceRole: !If [ShouldUseOrgs, !GetAtt GenerateRoleForOrg.Arn, !GetAtt GenerateRoleNotForOrg.Arn]
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
        EnvironmentVariables:
          - Name: SINGLE_ACCOUNT_ID
            Type: PLAINTEXT
            Value: CHANGE_ME
          - Name: GIT_REPO
            Type: PLAINTEXT
            Value: !GetAtt CodeRepo.CloneUrlHttp
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
          {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
          {% else %}
                - pip install aws-service-catalog-puppet=={{ VERSION }}
          {% endif %}
            build:
              commands:
                - git clone --config 'credential.helper=!aws codecommit credential-helper $@' --config 'credential.UseHttpPath=true' ${GIT_REPO}
                - cd ServiceCatalogPuppet
                - servicecatalog-puppet --info expand manifest.yaml
                - servicecatalog-puppet --info generate-shares manifest-expanded.yaml
                - servicecatalog-puppet --info deploy-templates-into-regions output/templates/shares shares
                - servicecatalog-puppet --info deploy --single-account ${SINGLE_ACCOUNT_ID} manifest-expanded.yaml
      TimeoutInMinutes: 30


Outputs:
  Version:
    Value: !GetAtt Param.Value