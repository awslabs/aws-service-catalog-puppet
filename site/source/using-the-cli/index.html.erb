---
title: Using the CLI - Cloud Workflow Engine
---

<div class="advanced-topic-banner">
  <h1>üöÄ Using the CLI</h1>
  <p class="advanced-label"><strong>Advanced Topic</strong> - For experienced users and automation</p>
</div>

<p>This section documents the command-line interface (CLI) commands available in Cloud Workflow Engine. These commands provide direct access to the engine's functionality for advanced users, automation, and CI/CD pipelines.</p>

<div class="important-notice">
  <h3>‚ö†Ô∏è Important</h3>
  <p><strong>CLI commands are intended for advanced users who understand the workflow engine architecture.</strong> For getting started, please refer to the <%= link_to "How-To Guides", "/how-to/" %> section first, especially <%= link_to "Adding Accounts", "/how-to/adding-accounts/" %>.</p>
  
  <h4>‚ö†Ô∏è Use at Your Own Risk</h4>
  <ul>
    <li><strong>Commands may be added, removed, or changed between releases</strong></li>
    <li><strong>Command implementations and behavior may change without notice</strong></li>
    <li><strong>Options and parameters may be modified or deprecated</strong></li>
    <li><strong>Always test CLI commands in development environments first</strong></li>
    <li><strong>Using CLI commands directly is at your own risk</strong></li>
  </ul>
</div>

<h2>Table of Contents</h2>

<div class="toc-grid">
  <div class="toc-section">
    <h3>Bootstrap Commands</h3>
    <ul>
      <li><a href="#bootstrap">bootstrap</a></li>
      <li><a href="#bootstrap-org-master">bootstrap-org-master</a></li>
      <li><a href="#bootstrap-scp-master">bootstrap-scp-master</a></li>
      <li><a href="#bootstrap-spoke">bootstrap-spoke</a></li>
      <li><a href="#bootstrap-spoke-as">bootstrap-spoke-as</a></li>
      <li><a href="#bootstrap-spokes-in-ou">bootstrap-spokes-in-ou</a></li>
    </ul>
  </div>
  
  <div class="toc-section">
    <h3>Deployment Commands</h3>
    <ul>
      <li><a href="#deploy-from-task-reference">deploy-from-task-reference</a></li>
      <li><a href="#deploy-in-spoke-from-task-reference">deploy-in-spoke-from-task-reference</a></li>
      <li><a href="#dry-run">dry-run</a></li>
      <li><a href="#expand">expand</a></li>
    </ul>
  </div>
  
  <div class="toc-section">
    <h3>Management Commands</h3>
    <ul>
      <li><a href="#add-to-accounts">add-to-accounts</a></li>
      <li><a href="#add-to-launches">add-to-launches</a></li>
      <li><a href="#list-launches">list-launches</a></li>
      <li><a href="#list-resources">list-resources</a></li>
      <li><a href="#remove-from-accounts">remove-from-accounts</a></li>
      <li><a href="#remove-from-launches">remove-from-launches</a></li>
      <li><a href="#seed">seed</a></li>
    </ul>
  </div>
  
  <div class="toc-section">
    <h3>Configuration Commands</h3>
    <ul>
      <li><a href="#set-config-value">set-config-value</a></li>
      <li><a href="#set-named-config-value">set-named-config-value</a></li>
      <li><a href="#set-org-iam-role-arn">set-org-iam-role-arn</a></li>
      <li><a href="#set-org-scp-role-arn">set-org-scp-role-arn</a></li>
      <li><a href="#set-regions">set-regions</a></li>
      <li><a href="#upload-config">upload-config</a></li>
    </ul>
  </div>
  
  <div class="toc-section">
    <h3>Utility Commands</h3>
    <ul>
      <li><a href="#export-puppet-pipeline-logs">export-puppet-pipeline-logs</a></li>
      <li><a href="#export-traces">export-traces</a></li>
      <li><a href="#generate-deploy-viz">generate-deploy-viz</a></li>
      <li><a href="#generate-task-reference">generate-task-reference</a></li>
      <li><a href="#graph">graph</a></li>
      <li><a href="#import-product-set">import-product-set</a></li>
      <li><a href="#release-spoke">release-spoke</a></li>
      <li><a href="#reset-provisioned-product-owner">reset-provisioned-product-owner</a></li>
      <li><a href="#run">run</a></li>
      <li><a href="#show-codebuilds">show-codebuilds</a></li>
      <li><a href="#show-pipelines">show-pipelines</a></li>
      <li><a href="#uninstall">uninstall</a></li>
      <li><a href="#validate">validate</a></li>
      <li><a href="#version">version</a></li>
      <li><a href="#wait-for-code-build-in">wait-for-code-build-in</a></li>
      <li><a href="#wait-for-run-to-complete">wait-for-run-to-complete</a></li>
    </ul>
  </div>
</div>

<hr>

<h2>Bootstrap Commands</h2>

<h3><a id="bootstrap"></a><code>bootstrap</code></h3>

Initialize Cloud Workflow Engine in the hub account with CI/CD pipeline setup.

<pre><code class="language-bash">cloud-workflow-engine bootstrap [OPTIONS]</code></pre>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--with-manual-approvals/--with-no-manual-approvals</code></td>
      <td>Enable manual approvals in pipeline</td>
      <td>False</td>
    </tr>
    <tr>
      <td><code>--puppet-code-pipeline-role-permission-boundary</code></td>
      <td>Permission boundary for pipeline role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--source-role-permissions-boundary</code></td>
      <td>Permission boundary for source role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--puppet-generate-role-permission-boundary</code></td>
      <td>Permission boundary for generate role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--puppet-deploy-role-permission-boundary</code></td>
      <td>Permission boundary for deploy role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--puppet-provisioning-role-permissions-boundary</code></td>
      <td>Permission boundary for provisioning role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--cloud-formation-deploy-role-permissions-boundary</code></td>
      <td>Permission boundary for CloudFormation role</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--deploy-environment-compute-type</code></td>
      <td>CodeBuild compute type</td>
      <td>BUILD_GENERAL1_SMALL</td>
    </tr>
    <tr>
      <td><code>--spoke-deploy-environment-compute-type</code></td>
      <td>Spoke CodeBuild compute type</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--deploy-num-workers</code></td>
      <td>Number of deployment workers</td>
      <td>10</td>
    </tr>
    <tr>
      <td><code>--source-provider</code></td>
      <td>Source provider: CodeCommit, GitHub, CodeStarSourceConnection, S3, Custom</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--repository-name</code></td>
      <td>Repository name</td>
      <td>CloudWorkflowEngine</td>
    </tr>
    <tr>
      <td><code>--branch-name</code></td>
      <td>Branch name</td>
      <td>master</td>
    </tr>
    <tr>
      <td><code>--puppet-role-name</code></td>
      <td>Cross-account role name</td>
      <td>PuppetRole</td>
    </tr>
    <tr>
      <td><code>--puppet-role-path</code></td>
      <td>Cross-account role path</td>
      <td>/cloud-workflow-engine/</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Basic bootstrap with CodeCommit
cloud-workflow-engine bootstrap --source-provider CodeCommit

# Bootstrap with GitHub source
cloud-workflow-engine bootstrap \
  --source-provider GitHub \
  --owner myorg \
  --repo my-puppet-config \
  --branch main

# Bootstrap with manual approvals enabled
cloud-workflow-engine bootstrap \
  --with-manual-approvals \
  --deploy-num-workers 20</code></pre>

---

<h3><a id="bootstrap-org-master"></a><code>bootstrap-org-master</code></h3>

Bootstrap the organization master account for AWS Organizations integration.

<pre><code class="language-bash">cloud-workflow-engine bootstrap-org-master PUPPET_ACCOUNT_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PUPPET_ACCOUNT_ID</code></td>
      <td>The hub account ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--tag</code></td>
      <td>Tags to apply</td>
      <td>Key=Value</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Bootstrap org master account
cloud-workflow-engine bootstrap-org-master 123456789012 \
  --tag Environment=Production \
  --tag Owner=Platform</code></pre>

---

<h3><a id="bootstrap-scp-master"></a><code>bootstrap-scp-master</code></h3>

Bootstrap the organization master account for Service Control Policy management.

<pre><code class="language-bash">cloud-workflow-engine bootstrap-scp-master PUPPET_ACCOUNT_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PUPPET_ACCOUNT_ID</code></td>
      <td>The hub account ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Format</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--tag</code></td>
      <td>Tags to apply</td>
      <td>Key=Value</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Bootstrap SCP master account
cloud-workflow-engine bootstrap-scp-master 123456789012 \
  --tag Purpose=Governance</code></pre>

---

<h3><a id="bootstrap-spoke"></a><code>bootstrap-spoke</code></h3>

Bootstrap a single spoke account to work with the hub account.

<pre><code class="language-bash">cloud-workflow-engine bootstrap-spoke PUPPET_ACCOUNT_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PUPPET_ACCOUNT_ID</code></td>
      <td>The hub account ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--permission-boundary</code></td>
      <td>Permission boundary ARN</td>
      <td>AdministratorAccess</td>
    </tr>
    <tr>
      <td><code>--puppet-role-name</code></td>
      <td>Cross-account role name</td>
      <td>PuppetRole</td>
    </tr>
    <tr>
      <td><code>--puppet-role-path</code></td>
      <td>Cross-account role path</td>
      <td>/cloud-workflow-engine/</td>
    </tr>
    <tr>
      <td><code>--tag</code></td>
      <td>Tags to apply</td>
      <td>Key=Value format</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Bootstrap spoke account
cloud-workflow-engine bootstrap-spoke 123456789012

# Bootstrap with custom role name and permission boundary
cloud-workflow-engine bootstrap-spoke 123456789012 \
  --puppet-role-name CustomPuppetRole \
  --permission-boundary arn:aws:iam::aws:policy/PowerUserAccess</code></pre>

---

<h3><a id="bootstrap-spoke-as"></a><code>bootstrap-spoke-as</code></h3>

Bootstrap a spoke account while assuming a specific IAM role.

<pre><code class="language-bash">cloud-workflow-engine bootstrap-spoke-as PUPPET_ACCOUNT_ID IAM_ROLE_ARNS [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PUPPET_ACCOUNT_ID</code></td>
      <td>The hub account ID</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>IAM_ROLE_ARNS</code></td>
      <td>One or more IAM role ARNs to assume</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--permission-boundary</code></td>
      <td>Permission boundary ARN</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--puppet-role-name</code></td>
      <td>Cross-account role name</td>
      <td>PuppetRole</td>
    </tr>
    <tr>
      <td><code>--puppet-role-path</code></td>
      <td>Cross-account role path</td>
      <td>/cloud-workflow-engine/</td>
    </tr>
    <tr>
      <td><code>--tag</code></td>
      <td>Tags to apply</td>
      <td>Key=Value format</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Bootstrap spoke via assumed role
cloud-workflow-engine bootstrap-spoke-as 123456789012 \
  arn:aws:iam::987654321098:role/OrganizationAccountAccessRole</code></pre>

---

<h3><a id="bootstrap-spokes-in-ou"></a><code>bootstrap-spokes-in-ou</code></h3>

Bootstrap all accounts in an Organizational Unit.

<pre><code class="language-bash">cloud-workflow-engine bootstrap-spokes-in-ou OU_PATH_OR_ID ROLE_NAME IAM_ROLE_ARNS [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>OU_PATH_OR_ID</code></td>
      <td>OU path or ID (e.g., /Production/ or ou-12345678)</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>ROLE_NAME</code></td>
      <td>Role name to assume in target accounts</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>IAM_ROLE_ARNS</code></td>
      <td>One or more IAM role ARNs to assume</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--permission-boundary</code></td>
      <td>Permission boundary ARN</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--num-workers</code></td>
      <td>Number of parallel workers</td>
      <td>10</td>
    </tr>
    <tr>
      <td><code>--puppet-role-name</code></td>
      <td>Cross-account role name</td>
      <td>PuppetRole</td>
    </tr>
    <tr>
      <td><code>--puppet-role-path</code></td>
      <td>Cross-account role path</td>
      <td>/cloud-workflow-engine/</td>
    </tr>
    <tr>
      <td><code>--tag</code></td>
      <td>Tags to apply</td>
      <td>Key=Value format</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Bootstrap all accounts in Production OU
cloud-workflow-engine bootstrap-spokes-in-ou /Production/ \
  OrganizationAccountAccessRole \
  arn:aws:iam::123456789012:role/BootstrapRole \
  --num-workers 5</code></pre>

---

<h2>Deployment Commands</h2>

<h3><a id="deploy-from-task-reference"></a><code>deploy-from-task-reference</code></h3>

Deploy infrastructure from a task reference file (used by CI/CD pipelines).

<pre><code class="language-bash">cloud-workflow-engine deploy-from-task-reference PATH [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PATH</code></td>
      <td>Path to task reference file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--num-workers</code></td>
      <td>Number of parallel workers</td>
      <td>10</td>
    </tr>
    <tr>
      <td><code>--execution-mode</code></td>
      <td>Execution mode: hub or spoke</td>
      <td>hub</td>
    </tr>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--home-region</code></td>
      <td>Home region for operations</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--regions</code></td>
      <td>Comma-separated list of regions</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-account</code></td>
      <td>Target single account only</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-section</code></td>
      <td>Target specific action section</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-item</code></td>
      <td>Target specific action item</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-collect-cloudformation-events</code></td>
      <td>Enable CloudFormation event collection</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-forward-events-to-eventbridge</code></td>
      <td>Forward events to EventBridge</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-forward-failures-to-opscenter</code></td>
      <td>Forward failures to OpsCenter</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--output-cache-starting-point</code></td>
      <td>Cache starting point</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--is-caching-enabled</code></td>
      <td>Enable caching</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--on-complete-url</code></td>
      <td>Webhook URL to call on completion</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Deploy from task reference with default settings
cloud-workflow-engine deploy-from-task-reference ./tasks.yaml

# Deploy with specific configuration
cloud-workflow-engine deploy-from-task-reference ./tasks.yaml \
  --num-workers 20 \
  --single-account 123456789012 \
  --home-region us-east-1</code></pre>

---

<h3><a id="deploy-in-spoke-from-task-reference"></a><code>deploy-in-spoke-from-task-reference</code></h3>

Deploy from task reference in spoke mode.

<pre><code class="language-bash">cloud-workflow-engine deploy-in-spoke-from-task-reference PATH [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>PATH</code></td>
      <td>Path to task reference file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--num-workers</code></td>
      <td>Number of parallel workers</td>
      <td>10</td>
    </tr>
    <tr>
      <td><code>--execution-mode</code></td>
      <td>Execution mode: hub or spoke</td>
      <td>spoke</td>
    </tr>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--home-region</code></td>
      <td>Home region for operations</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--regions</code></td>
      <td>Comma-separated list of regions</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-account</code></td>
      <td>Target single account only</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-section</code></td>
      <td>Target specific action section</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-item</code></td>
      <td>Target specific action item</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-collect-cloudformation-events</code></td>
      <td>Enable CloudFormation event collection</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-forward-events-to-eventbridge</code></td>
      <td>Forward events to EventBridge</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--should-forward-failures-to-opscenter</code></td>
      <td>Forward failures to OpsCenter</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--output-cache-starting-point</code></td>
      <td>Cache starting point</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--is-caching-enabled</code></td>
      <td>Enable caching</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--on-complete-url</code></td>
      <td>Webhook URL to call on completion</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Deploy in spoke mode
cloud-workflow-engine deploy-in-spoke-from-task-reference ./tasks.yaml \
  --execution-mode spoke \
  --puppet-account-id 123456789012</code></pre>

---

<h3><a id="dry-run"></a><code>dry-run</code></h3>

Perform a dry run to preview changes without executing them.

<pre><code class="language-bash">cloud-workflow-engine dry-run MANIFEST_FILE [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--single-account</code></td>
      <td>Target single account</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Note:** Currently disabled due to performance issues.

---

<h3><a id="expand"></a><code>expand</code></h3>

Expand a manifest file to show all resolved tasks and dependencies.

<pre><code class="language-bash">cloud-workflow-engine expand MANIFEST_FILE [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--single-account</code></td>
      <td>Target single account</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-section</code></td>
      <td>Target specific action section</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-item</code></td>
      <td>Target specific action item</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--single-action-include-dependencies</code></td>
      <td>Include dependencies</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>--single-action-include-reverse-dependencies</code></td>
      <td>Include reverse dependencies</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Expand full manifest
cloud-workflow-engine expand manifest.yaml

# Expand for single account
cloud-workflow-engine expand manifest.yaml \
  --single-account 123456789012

# Expand specific action with dependencies
cloud-workflow-engine expand manifest.yaml \
  --single-action-section launches \
  --single-action-item my-application</code></pre>

---

<h2>Management Commands</h2>

<h3><a id="add-to-accounts"></a><code>add-to-accounts</code></h3>

Add accounts or organizational units to the configuration.

<pre><code class="language-bash">cloud-workflow-engine add-to-accounts ACCOUNT_OR_OU_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>ACCOUNT_OR_OU_FILE</code></td>
      <td>YAML file containing account or OU definitions</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-yaml"># accounts.yaml
accounts:
  - account_id: "123456789012"
    name: "production-us-east-1"
    email: "aws-prod@company.com"
    organization_unit: "/production/"

organizational_units:
  - name: "production"
    path: "/production/"</code></pre>

<pre><code class="language-bash">cloud-workflow-engine add-to-accounts accounts.yaml</code></pre>

---

<h3><a id="add-to-launches"></a><code>add-to-launches</code></h3>

Add launch configurations to the manifest.

<pre><code class="language-bash">cloud-workflow-engine add-to-launches LAUNCH_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>LAUNCH_FILE</code></td>
      <td>YAML file containing launch definitions</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-yaml"># launches.yaml
launches:
  my-application:
    portfolio: shared-services
    product: web-application
    version: v1.0.0
    deploy_to:
      accounts:
        - "123456789012"</code></pre>

<pre><code class="language-bash">cloud-workflow-engine add-to-launches launches.yaml</code></pre>

---

<h3><a id="generate-task-reference"></a><code>generate-task-reference</code></h3>

Generate a task reference file from a manifest for pipeline execution.

<pre><code class="language-bash">cloud-workflow-engine generate-task-reference MANIFEST_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Generate task reference
cloud-workflow-engine generate-task-reference manifest.yaml > tasks.yaml</code></pre>

---

<h3><a id="graph"></a><code>graph</code></h3>

Generate a dependency graph of the workflow.

<pre><code class="language-bash">cloud-workflow-engine graph MANIFEST_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Generate graph
cloud-workflow-engine graph manifest.yaml > workflow-graph.dot

# Convert to image using Graphviz
dot -Tpng workflow-graph.dot -o workflow-graph.png</code></pre>

---

<h3><a id="import-product-set"></a><code>import-product-set</code></h3>

Import a product set into a portfolio.

<pre><code class="language-bash">cloud-workflow-engine import-product-set MANIFEST_FILE NAME PORTFOLIO_NAME</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>NAME</code></td>
      <td>Product set name</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>PORTFOLIO_NAME</code></td>
      <td>Target portfolio name</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

---

<h3><a id="list-launches"></a><code>list-launches</code></h3>

List all launches in the expanded manifest.

<pre><code class="language-bash">cloud-workflow-engine list-launches EXPANDED_MANIFEST [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>EXPANDED_MANIFEST</code></td>
      <td>Path to expanded manifest file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--format/-f</code></td>
      <td>Output format: table, json</td>
      <td>table</td>
    </tr>
  </tbody>
</table>

**Note:** Currently disabled due to performance issues.

---

<h3><a id="list-resources"></a><code>list-resources</code></h3>

List all AWS resources managed by the workflow engine.

<pre><code class="language-bash">cloud-workflow-engine list-resources</code></pre>

**Usage:**
<pre><code class="language-bash"># List managed resources
cloud-workflow-engine list-resources</code></pre>

---

<h3><a id="remove-from-accounts"></a><code>remove-from-accounts</code></h3>

Remove an account or OU from configuration.

<pre><code class="language-bash">cloud-workflow-engine remove-from-accounts ACCOUNT_ID_OR_OU_ID_OR_OU_PATH</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>ACCOUNT_ID_OR_OU_ID_OR_OU_PATH</code></td>
      <td>Account ID, OU ID, or OU path to remove</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Remove account by ID
cloud-workflow-engine remove-from-accounts 123456789012

# Remove OU by path
cloud-workflow-engine remove-from-accounts /staging/</code></pre>

---

<h3><a id="remove-from-launches"></a><code>remove-from-launches</code></h3>

Remove a launch from the manifest.

<pre><code class="language-bash">cloud-workflow-engine remove-from-launches LAUNCH_NAME</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>LAUNCH_NAME</code></td>
      <td>Name of launch to remove</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash">cloud-workflow-engine remove-from-launches my-old-application</code></pre>

---

<h3><a id="reset-provisioned-product-owner"></a><code>reset-provisioned-product-owner</code></h3>

Reset the owner of provisioned products.

<pre><code class="language-bash">cloud-workflow-engine reset-provisioned-product-owner MANIFEST_FILE</code></pre>

**Note:** This command is deprecated and not supported in current versions.

---

<h3><a id="run"></a><code>run</code></h3>

Run the workflow engine with specified configuration.

<pre><code class="language-bash">cloud-workflow-engine run [WHAT] [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>WHAT</code></td>
      <td>What to run</td>
      <td>No</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--tail/--no-tail</code></td>
      <td>Tail logs</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Run with log tailing
cloud-workflow-engine run --tail

# Run specific component
cloud-workflow-engine run deploy --tail</code></pre>

---

<h3><a id="seed"></a><code>seed</code></h3>

Generate sample configuration files to get started.

<pre><code class="language-bash">cloud-workflow-engine seed [COMPLEXITY] PATH</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>COMPLEXITY</code></td>
      <td>Configuration complexity: simple</td>
      <td>No</td>
    </tr>
    <tr>
      <td><code>PATH</code></td>
      <td>Directory to create seed files</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Create simple seed configuration
cloud-workflow-engine seed simple ./config

# Create complex seed configuration  
cloud-workflow-engine seed complex ./advanced-config</code></pre>

---

<h3><a id="validate"></a><code>validate</code></h3>

Validate a manifest file for syntax and configuration errors.

<pre><code class="language-bash">cloud-workflow-engine validate MANIFEST_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>MANIFEST_FILE</code></td>
      <td>Path to manifest file to validate</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Validate manifest
cloud-workflow-engine validate manifest.yaml</code></pre>

---

<h2>Configuration Commands</h2>

<h3><a id="set-config-value"></a><code>set-config-value</code></h3>

Set a configuration value in the remote configuration.

<pre><code class="language-bash">cloud-workflow-engine set-config-value NAME VALUE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>NAME</code></td>
      <td>Configuration parameter name</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>VALUE</code></td>
      <td>Configuration parameter value</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Common Parameters:**
- `regions` - List of AWS regions
- `should_use_sns` - Enable SNS notifications
- `should_use_eventbridge` - Enable EventBridge integration
- `deploy_num_workers` - Number of deployment workers

**Usage:**
<pre><code class="language-bash"># Set number of workers
cloud-workflow-engine set-config-value deploy_num_workers 20

# Enable SNS notifications
cloud-workflow-engine set-config-value should_use_sns true</code></pre>

---

<h3><a id="set-named-config-value"></a><code>set-named-config-value</code></h3>

Set a named configuration value.

<pre><code class="language-bash">cloud-workflow-engine set-named-config-value NAME VALUE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>NAME</code></td>
      <td>Configuration name</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><code>VALUE</code></td>
      <td>Configuration value</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

---

<h3><a id="set-org-iam-role-arn"></a><code>set-org-iam-role-arn</code></h3>

Set the IAM role ARN for AWS Organizations operations.

<pre><code class="language-bash">cloud-workflow-engine set-org-iam-role-arn ORG_IAM_ROLE_ARN</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>ORG_IAM_ROLE_ARN</code></td>
      <td>IAM role ARN for Organizations operations</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash">cloud-workflow-engine set-org-iam-role-arn \
  arn:aws:iam::123456789012:role/OrganizationRole</code></pre>

---

<h3><a id="set-org-scp-role-arn"></a><code>set-org-scp-role-arn</code></h3>

Set the IAM role ARN for Service Control Policy operations.

<pre><code class="language-bash">cloud-workflow-engine set-org-scp-role-arn ORG_SCP_ROLE_ARN</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>ORG_SCP_ROLE_ARN</code></td>
      <td>IAM role ARN for SCP operations</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash">cloud-workflow-engine set-org-scp-role-arn \
  arn:aws:iam::123456789012:role/SCPManagementRole</code></pre>

---

<h3><a id="set-regions"></a><code>set-regions</code></h3>

Set the list of AWS regions for operations.

<pre><code class="language-bash">cloud-workflow-engine set-regions REGIONS...</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>REGIONS</code></td>
      <td>One or more AWS region names</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Set multiple regions
cloud-workflow-engine set-regions us-east-1 us-west-2 eu-west-1

# Set single region
cloud-workflow-engine set-regions us-east-1</code></pre>

---

<h3><a id="upload-config"></a><code>upload-config</code></h3>

Upload configuration from a local file to remote storage.

<pre><code class="language-bash">cloud-workflow-engine upload-config CONFIG_FILE</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>CONFIG_FILE</code></td>
      <td>Path to YAML configuration file</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Upload configuration
cloud-workflow-engine upload-config config.yaml</code></pre>

---

<h2>Utility Commands</h2>

<h3><a id="export-puppet-pipeline-logs"></a><code>export-puppet-pipeline-logs</code></h3>

Export pipeline execution logs for debugging.

<pre><code class="language-bash">cloud-workflow-engine export-puppet-pipeline-logs EXECUTION_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>EXECUTION_ID</code></td>
      <td>Pipeline execution ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Export pipeline logs
cloud-workflow-engine export-puppet-pipeline-logs abc123-def456-ghi789</code></pre>

---

<h3><a id="export-traces"></a><code>export-traces</code></h3>

Export execution traces for performance analysis.

<pre><code class="language-bash">cloud-workflow-engine export-traces CODEBUILD_EXECUTION_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>CODEBUILD_EXECUTION_ID</code></td>
      <td>CodeBuild execution ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

---

<h3><a id="generate-deploy-viz"></a><code>generate-deploy-viz</code></h3>

Generate deployment visualization from execution logs.

<pre><code class="language-bash">cloud-workflow-engine generate-deploy-viz CODEBUILD_EXECUTION_ID [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>CODEBUILD_EXECUTION_ID</code></td>
      <td>CodeBuild execution ID</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--group-by-pid/--no-group-by-pid</code></td>
      <td>Group by process ID</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

---

<h3><a id="release-spoke"></a><code>release-spoke</code></h3>

Release/cleanup spoke account resources.

<pre><code class="language-bash">cloud-workflow-engine release-spoke [OPTIONS]</code></pre>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Release spoke resources
cloud-workflow-engine release-spoke --puppet-account-id 123456789012</code></pre>

---

<h3><a id="show-codebuilds"></a><code>show-codebuilds</code></h3>

Show CodeBuild execution history and status.

<pre><code class="language-bash">cloud-workflow-engine show-codebuilds [OPTIONS]</code></pre>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--filter</code></td>
      <td>Filter type: none, single-runs, full-runs</td>
      <td>none</td>
    </tr>
    <tr>
      <td><code>--format</code></td>
      <td>Output format: csv, json</td>
      <td>csv</td>
    </tr>
    <tr>
      <td><code>--limit</code></td>
      <td>Number of results to show</td>
      <td>20</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Show recent CodeBuild runs
cloud-workflow-engine show-codebuilds --format json --limit 10

# Show only full runs
cloud-workflow-engine show-codebuilds --filter full-runs</code></pre>

---

<h3><a id="show-pipelines"></a><code>show-pipelines</code></h3>

Show pipeline status and information.

<pre><code class="language-bash">cloud-workflow-engine show-pipelines [OPTIONS]</code></pre>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--format/-f</code></td>
      <td>Output format: table, json, html</td>
      <td>table</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Show pipelines in table format
cloud-workflow-engine show-pipelines

# Show pipelines in JSON format
cloud-workflow-engine show-pipelines --format json</code></pre>

---

<h3><a id="uninstall"></a><code>uninstall</code></h3>

Uninstall Cloud Workflow Engine from the hub account.

<pre><code class="language-bash">cloud-workflow-engine uninstall [OPTIONS]</code></pre>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--puppet-account-id</code></td>
      <td>Hub account ID</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Uninstall from current account
cloud-workflow-engine uninstall

# Uninstall from specific account
cloud-workflow-engine uninstall --puppet-account-id 123456789012</code></pre>

---

<h3><a id="version"></a><code>version</code></h3>

Display version information.

<pre><code class="language-bash">cloud-workflow-engine version</code></pre>

**Usage:**
<pre><code class="language-bash"># Show version
cloud-workflow-engine version</code></pre>

---

<h3><a id="wait-for-code-build-in"></a><code>wait-for-code-build-in</code></h3>

Wait for CodeBuild service to be available in specified accounts.

<pre><code class="language-bash">cloud-workflow-engine wait-for-code-build-in IAM_ROLE_ARNS...</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>IAM_ROLE_ARNS</code></td>
      <td>One or more IAM role ARNs to assume for checking</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Wait for CodeBuild availability
cloud-workflow-engine wait-for-code-build-in \
  arn:aws:iam::123456789012:role/TestRole \
  arn:aws:iam::234567890123:role/TestRole</code></pre>

---

<h3><a id="wait-for-run-to-complete"></a><code>wait-for-run-to-complete</code></h3>

Wait for a pipeline execution to complete.

<pre><code class="language-bash">cloud-workflow-engine wait-for-run-to-complete EXECUTION [OPTIONS]</code></pre>

<h4>Arguments</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
      <th>Required</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>EXECUTION</code></td>
      <td>Execution ID to monitor</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h4>Options</h4>
<table class="cli-table">
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--on-complete-url</code></td>
      <td>Webhook URL to call on completion</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

**Usage:**
<pre><code class="language-bash"># Wait for execution to complete
cloud-workflow-engine wait-for-run-to-complete abc123-def456-ghi789

# Wait with webhook notification
cloud-workflow-engine wait-for-run-to-complete abc123-def456-ghi789 \
  --on-complete-url https://webhook.example.com/notify</code></pre>

---

<h2>Environment Variables</h2>

Many CLI commands support environment variables for configuration:

- `PUPPET_ACCOUNT_ID` - Hub account ID
- `SINGLE_ACCOUNT` - Target single account
- `HOME_REGION` - Home region for operations
- `DEPLOY_NUM_WORKERS` - Number of deployment workers
- `SCM_SOURCE_PROVIDER` - Source code management provider
- `SCM_REPOSITORY_NAME` - Repository name
- `SCM_BRANCH_NAME` - Branch name
- `SHOULD_COLLECT_CLOUDFORMATION_EVENTS` - Enable CloudFormation events
- `SHOULD_FORWARD_EVENTS_TO_EVENTBRIDGE` - Forward to EventBridge
- `SHOULD_FORWARD_FAILURES_TO_OPSCENTER` - Forward failures to OpsCenter

<h2>Best Practices</h2>

<h3>1. Environment Management</h3>
- Use environment variables for account IDs and common configuration
- Separate dev/staging/production configurations
- Use parameter files for complex configurations

<h3>2. Error Handling</h3>
- Always validate manifests before deployment
- Use dry-run when available to preview changes
- Monitor pipeline logs for debugging

<h3>3. Performance Optimization</h3>
- Adjust `--num-workers` based on account limits and complexity
- Use caching options for repeated deployments
- Consider regional limitations and quotas

<h3>4. Security</h3>
- Use IAM roles with minimal necessary permissions
- Regularly rotate access keys and tokens
- Audit pipeline execution logs

<h3>5. Monitoring</h3>
- Use `show-pipelines` to monitor execution status
- Export logs and traces for performance analysis
- Set up EventBridge integration for real-time monitoring

<style>
.advanced-topic-banner {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 2rem;
  border-radius: 8px;
  margin-bottom: 2rem;
}

.advanced-topic-banner h1 {
  margin: 0;
  font-size: 2.5rem;
}

.advanced-label {
  background: rgba(255,255,255,0.2);
  padding: 0.5rem 1rem;
  border-radius: 20px;
  display: inline-block;
  margin-top: 1rem;
  font-size: 0.9rem;
}

.important-notice {
  background: #fff3cd;
  border: 1px solid #ffeaa7;
  padding: 1rem;
  border-radius: 6px;
  margin: 1.5rem 0;
}

.important-notice h3 {
  margin-top: 0;
  color: #856404;
}

.toc-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin: 2rem 0;
}

.toc-section {
  background: #f8f9fa;
  padding: 1.5rem;
  border-radius: 8px;
  border-left: 4px solid #007bff;
}

.toc-section h3 {
  margin-top: 0;
  color: #495057;
  border-bottom: 1px solid #dee2e6;
  padding-bottom: 0.5rem;
}

.toc-section ul {
  margin: 0;
  padding-left: 1rem;
}

.toc-section li {
  margin-bottom: 0.25rem;
}

.toc-section a {
  color: #007bff;
  text-decoration: none;
  font-family: monospace;
  font-size: 0.9rem;
}

.toc-section a:hover {
  text-decoration: underline;
}

h2 {
  border-top: 3px solid #007bff;
  padding-top: 1rem;
  margin-top: 3rem;
}

h3 a {
  color: #495057;
  text-decoration: none;
}

h3 code {
  background: #e9ecef;
  color: #495057;
}

.cli-table {
  width: 100%;
  border-collapse: collapse;
  margin: 1rem 0;
  font-size: 0.9rem;
}

.cli-table th,
.cli-table td {
  border: 1px solid #dee2e6;
  padding: 0.75rem;
  text-align: left;
  vertical-align: top;
}

.cli-table th {
  background-color: #f8f9fa;
  font-weight: 600;
  color: #495057;
}

.cli-table tbody tr:nth-child(even) {
  background-color: #f8f9fa;
}

.cli-table code {
  background: #e9ecef;
  padding: 0.2rem 0.4rem;
  border-radius: 3px;
  font-size: 0.85rem;
}

h4 {
  color: #495057;
  margin-top: 1.5rem;
  margin-bottom: 0.5rem;
  font-size: 1.1rem;
}
</style>