.PHONY: bump-patch bump-minor bump-major clean prepare-for-testing

## @Project_setup Increment patch number
bump-patch:
	uv add --dev tomli-w
	uv run python -c "import tomllib; import tomli_w; f=open('pyproject.toml','rb'); data=tomllib.load(f); f.close(); v=data['project']['version'].split('.'); v[2]=str(int(v[2])+1); data['project']['version']='.'.join(v); f=open('pyproject.toml','wb'); tomli_w.dump(data,f); f.close()"

## @Project_setup Increment minor number
bump-minor:
	uv add --dev tomli-w
	uv run python -c "import tomllib; import tomli_w; f=open('pyproject.toml','rb'); data=tomllib.load(f); f.close(); v=data['project']['version'].split('.'); v[1]=str(int(v[1])+1); v[2]='0'; data['project']['version']='.'.join(v); f=open('pyproject.toml','wb'); tomli_w.dump(data,f); f.close()"

## @Project_setup Increment major number
bump-major:
	uv add --dev tomli-w
	uv run python -c "import tomllib; import tomli_w; f=open('pyproject.toml','rb'); data=tomllib.load(f); f.close(); v=data['project']['version'].split('.'); v[0]=str(int(v[0])+1); v[1]='0'; v[2]='0'; data['project']['version']='.'.join(v); f=open('pyproject.toml','wb'); tomli_w.dump(data,f); f.close()"

## @Project_setup Cleans up after a build
clean:
	rm -rf data results output config.yaml
	rm -rf dist aws-service-catalog-puppet-* aws_service_catalog_puppet.egg-info/ reports
	rm -rf ignored/src/ServiceCatalogPuppet/tasks

## @Project_setup Prepares the project for testing (no longer needs setup.py with uv)
prepare-for-testing: build
	@echo "Project built successfully for testing with uv"
